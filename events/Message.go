package events

import (
	"copycoma-api/models"
	"copycoma-api/telegram"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"os"
	"strconv"
)

type Message_params struct {
	Name              string `json:"name"`
	Phone             string `json:"phone"`
	Email             string `json:"email"`
	Comment           string `json:"comment"`
	Color             bool   `json:"color"`
	TitleCover        string `json:"titleCover"`
	TitleLogo         string `json:"titleLogo"`
	TotalPages        int    `json:"totalPages"`
	CountBlackPages   int    `json:"countBlackPages"`
	CountColorPages   int    `json:"countColorPages"`
	ColoredPages      []int  `json:"coloredPages"`
	Price             int    `json:"price"`
	PocketForReview   bool   `json:"pocketForReview"`
	PocketDiskCD      bool   `json:"pocketDiskCD"`
	PlasticFileBefore struct {
		Active   bool `json:"active"`
		Quantity int  `json:"quantity"`
	} `json:"plasticFileBefore"`
	PlasticFileAfter struct {
		Active   bool `json:"active"`
		Quantity int  `json:"quantity"`
	} `json:"plasticFileAfter"`
	PlastikFileInTheEnd struct {
		Active   bool `json:"active"`
		Quantity int  `json:"quantity"`
	} `json:"plastikFileInTheEnd"`
}

func Message(w http.ResponseWriter, r *http.Request) {
	decoder := json.NewDecoder(r.Body)
	var params Message_params
	err := decoder.Decode(&params)

	if err != nil {
		log.Println("Error parse request copycom => ", err)
		fmt.Fprintf(w, "{}")
		return
	}

	mess := "üéì –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ üéì" + "\n\n"
	mess += "üë§ –ò–º—è: " + params.Name + "\n"
	mess += "üìû –¢–µ–ª–µ—Ñ–æ–Ω: " + params.Phone + "\n"

	if len(params.Email) > 0 {
		mess += "üì¨ Email: " + params.Email + "\n"
	} else {
		mess += "üì¨ Email –Ω–µ —É–∫–∞–∑–∞–Ω üì¨" + "\n"
	}

	if len(params.Comment) > 0 {
		mess += "üìß –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: " + params.Comment + "\n"
	} else {
		mess += "üìß –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ —É–∫–∞–∑–∞–Ω  " + "\n"
	}

	mess += "üìë –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü: " + fmt.Sprint(params.TotalPages) + "\n"
	mess += "üìë –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü —á/–±: " + fmt.Sprint(params.CountBlackPages) + "\n"
	mess += "üìë –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–≤–µ—Ç–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü: " + fmt.Sprint(params.CountColorPages) + "\n"

	if len(params.ColoredPages) == 0 {
		mess += "üìë–¶–≤–µ—Ç–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã!" + "\n"
	} else {
		mess += "\n" + "–¶–≤–µ—Ç–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: "

		for _, number := range params.ColoredPages {
			mess += fmt.Sprint(number) + ","
		}

		mess += "\n"
	}

	if params.Color {
		mess += "\n" + "üü• –ö—Ä–∞—Å–Ω–∞—è –æ–±–ª–æ–∂–∫–∞ üü•" + "\n"
	} else {
		mess += "\n" + "üü¶ –°–∏–Ω—è—è –æ–±–ª–æ–∂–∫–∞ üü¶" + "\n"
	}

	mess += "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ–±–ª–æ–∂–∫–∏: " + params.TitleCover + "\n"
	mess += "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –ª–æ–≥–æ—Ç–∏–ø–∞: " + params.TitleLogo + "\n"

	if params.PocketForReview {
		mess += "‚úÖ –í–∫–ª–µ–∏—Ç—å –∫–∞—Ä–º–∞–Ω –¥–ª—è —Ä–µ—Ü–µ–Ω–∑–∏–∏ ‚úÖ" + "\n"
	} else {
		mess += "‚ùå –ù–µ –≤–∫–ª–µ–∏–≤–∞—Ç—å –∫–∞—Ä–º–∞–Ω –¥–ª—è —Ä–µ—Ü–µ–Ω–∑–∏–∏ ‚ùå" + "\n"
	}

	if params.PocketDiskCD {
		mess += "\n" + "‚úÖ –í–∫–ª–µ–∏—Ç—å –∫–∞—Ä–º–∞–Ω –¥–ª—è CD –¥–∏—Å–∫–∞ ‚úÖ" + "\n"
	} else {
		mess += "\n" + "‚ùå –ù–µ –≤–∫–ª–µ–∏–≤–∞—Ç—å –∫–∞—Ä–º–∞–Ω –¥–ª—è CD –¥–∏—Å–∫–∞ ‚ùå" + "\n"
	}

	if params.PlasticFileBefore.Active {
		mess += "\n" + "üíø –î–æ–±–∞–≤–∏—Ç—å –ø–ª–∞—Å—Ç–∏–∫–æ–≤—ã–π —Ñ–∞–π–ª –ø–µ—Ä–µ–¥ —Ç–∏—Ç—É–ª–æ–º" + "\n"
		mess += "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: " + fmt.Sprint(params.PlasticFileBefore.Quantity) + "\n"
	}

	if params.PlasticFileAfter.Active {
		mess += "\n" + "üíø –î–æ–±–∞–≤–∏—Ç—å –ø–ª–∞—Å—Ç–∏–∫–æ–≤—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ —Ç–∏—Ç—É–ª–æ–º" + "\n"
		mess += "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: " + fmt.Sprint(params.PlasticFileAfter.Quantity) + "\n"
	}

	if params.PlastikFileInTheEnd.Active {
		mess += "\n" + "üíø –î–æ–±–∞–≤–∏—Ç—å –ø–ª–∞—Å—Ç–∏–∫–æ–≤—ã–π —Ñ–∞–π–ª –≤ –∫–æ–Ω—Ü–µ —Ä–∞–±–æ—Ç—ã" + "\n"
		mess += "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: " + fmt.Sprint(params.PlastikFileInTheEnd.Quantity) + "\n"
	}

	mess += "üí∞–¶–ï–ù–êüí∞: " + fmt.Sprint(params.Price) + " ‚ÇΩ" + "\n"

	fmt.Fprintf(w, "{}")

	chatID, _ := strconv.ParseInt(os.Getenv("TG_CHAT"), 10, 64)
	data := models.TgParams_sendMessage{
		Chat_id: chatID,
		Text:    mess,
	}

	out, _ := json.Marshal(data)
	telegram.SendMessage(os.Getenv("TG_TOKEN"), out)

	return
}
